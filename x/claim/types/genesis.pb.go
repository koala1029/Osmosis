// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/claim/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Action int32

const (
	ActionAddLiquidity  Action = 0
	ActionSwap          Action = 1
	ActionVote          Action = 2
	ActionDelegateStake Action = 3
)

var Action_name = map[int32]string{
	0: "ActionAddLiquidity",
	1: "ActionSwap",
	2: "ActionVote",
	3: "ActionDelegateStake",
}

var Action_value = map[string]int32{
	"ActionAddLiquidity":  0,
	"ActionSwap":          1,
	"ActionVote":          2,
	"ActionDelegateStake": 3,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9236f2c69911ca0c, []int{0}
}

type UserActions struct {
	User    string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Actions []Action `protobuf:"varint,2,rep,packed,name=actions,proto3,enum=osmosis.claim.v1beta1.Action" json:"actions,omitempty"`
}

func (m *UserActions) Reset()         { *m = UserActions{} }
func (m *UserActions) String() string { return proto.CompactTextString(m) }
func (*UserActions) ProtoMessage()    {}
func (*UserActions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9236f2c69911ca0c, []int{0}
}
func (m *UserActions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserActions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserActions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserActions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserActions.Merge(m, src)
}
func (m *UserActions) XXX_Size() int {
	return m.Size()
}
func (m *UserActions) XXX_DiscardUnknown() {
	xxx_messageInfo_UserActions.DiscardUnknown(m)
}

var xxx_messageInfo_UserActions proto.InternalMessageInfo

func (m *UserActions) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserActions) GetActions() []Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type UserAction struct {
	User   string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Action Action `protobuf:"varint,2,opt,name=action,proto3,enum=osmosis.claim.v1beta1.Action" json:"action,omitempty"`
}

func (m *UserAction) Reset()         { *m = UserAction{} }
func (m *UserAction) String() string { return proto.CompactTextString(m) }
func (*UserAction) ProtoMessage()    {}
func (*UserAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_9236f2c69911ca0c, []int{1}
}
func (m *UserAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAction.Merge(m, src)
}
func (m *UserAction) XXX_Size() int {
	return m.Size()
}
func (m *UserAction) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAction.DiscardUnknown(m)
}

var xxx_messageInfo_UserAction proto.InternalMessageInfo

func (m *UserAction) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserAction) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ActionAddLiquidity
}

// GenesisState defines the claim module's genesis state.
type GenesisState struct {
	// balance of the claim module's account
	ModuleAccountBalance types.Coin `protobuf:"bytes,1,opt,name=module_account_balance,json=moduleAccountBalance,proto3" json:"module_account_balance" yaml:"module_account_balance"`
	// airdrop start time
	AirdropStartTime time.Time `protobuf:"bytes,2,opt,name=airdrop_start_time,json=airdropStartTime,proto3,stdtime" json:"airdrop_start_time" yaml:"airdrop_start_time"`
	// duration until decay start to happen from airdrop start time
	DurationUntilDecay time.Duration `protobuf:"bytes,3,opt,name=duration_until_decay,json=durationUntilDecay,proto3,stdduration" json:"duration_until_decay,omitempty" yaml:"duration_until_decay"`
	// duration of decay from decay start time
	DurationOfDecay time.Duration `protobuf:"bytes,4,opt,name=duration_of_decay,json=durationOfDecay,proto3,stdduration" json:"duration_of_decay,omitempty" yaml:"duration_of_decay"`
	// this is the initial amount that is claimable per address
	// because the claimable amount decays over time, this is also the maximum
	// claimable amount
	// [(account_string, max_claimable), (account_string, max_claimable) ... ]
	InitialClaimables []types1.Balance `protobuf:"bytes,5,rep,name=initial_claimables,json=initialClaimables,proto3" json:"initial_claimables"`
	// the actions done per address
	// [(account_string, [done_action1, done_action2]), (account_string,
	// [done_action1]) ... ]
	Activities []UserActions `protobuf:"bytes,6,rep,name=activities,proto3" json:"activities"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9236f2c69911ca0c, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetModuleAccountBalance() types.Coin {
	if m != nil {
		return m.ModuleAccountBalance
	}
	return types.Coin{}
}

func (m *GenesisState) GetAirdropStartTime() time.Time {
	if m != nil {
		return m.AirdropStartTime
	}
	return time.Time{}
}

func (m *GenesisState) GetDurationUntilDecay() time.Duration {
	if m != nil {
		return m.DurationUntilDecay
	}
	return 0
}

func (m *GenesisState) GetDurationOfDecay() time.Duration {
	if m != nil {
		return m.DurationOfDecay
	}
	return 0
}

func (m *GenesisState) GetInitialClaimables() []types1.Balance {
	if m != nil {
		return m.InitialClaimables
	}
	return nil
}

func (m *GenesisState) GetActivities() []UserActions {
	if m != nil {
		return m.Activities
	}
	return nil
}

func init() {
	proto.RegisterEnum("osmosis.claim.v1beta1.Action", Action_name, Action_value)
	proto.RegisterType((*UserActions)(nil), "osmosis.claim.v1beta1.UserActions")
	proto.RegisterType((*UserAction)(nil), "osmosis.claim.v1beta1.UserAction")
	proto.RegisterType((*GenesisState)(nil), "osmosis.claim.v1beta1.GenesisState")
}

func init() {
	proto.RegisterFile("osmosis/claim/v1beta1/genesis.proto", fileDescriptor_9236f2c69911ca0c)
}

var fileDescriptor_9236f2c69911ca0c = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0x6e, 0xd6, 0xae, 0x9f, 0x3e, 0x17, 0x8d, 0xce, 0x8c, 0x91, 0x75, 0x2c, 0x2d, 0x41, 0x48,
	0xd3, 0x04, 0x89, 0x56, 0x84, 0x90, 0xb8, 0xad, 0xab, 0x04, 0x48, 0x48, 0x88, 0x96, 0x81, 0xb4,
	0x4b, 0xe4, 0x24, 0x5e, 0xb0, 0x96, 0xc4, 0x21, 0x76, 0x06, 0xfd, 0x07, 0x88, 0xd3, 0x4e, 0x88,
	0x3b, 0xff, 0x82, 0x5f, 0xb0, 0xe3, 0x8e, 0x9c, 0x0a, 0xda, 0x6e, 0x1c, 0xf7, 0x0b, 0x90, 0x63,
	0x27, 0x1b, 0x5d, 0xd0, 0x4e, 0xb1, 0xdf, 0xe7, 0x79, 0x9f, 0xf7, 0xf1, 0xeb, 0x37, 0x06, 0x77,
	0x29, 0x8b, 0x28, 0x23, 0xcc, 0xf6, 0x42, 0x44, 0x22, 0xfb, 0x60, 0xd3, 0xc5, 0x1c, 0x6d, 0xda,
	0x01, 0x8e, 0x31, 0x23, 0xcc, 0x4a, 0x52, 0xca, 0x29, 0xbc, 0xa9, 0x48, 0x56, 0x4e, 0xb2, 0x14,
	0xa9, 0xb3, 0x14, 0xd0, 0x80, 0xe6, 0x0c, 0x5b, 0xac, 0x24, 0xb9, 0x63, 0x78, 0x39, 0xdb, 0x76,
	0x11, 0xc3, 0xa5, 0x9e, 0x47, 0x49, 0xac, 0xf0, 0x3b, 0x25, 0x1e, 0xef, 0x57, 0xd7, 0xeb, 0x18,
	0x01, 0xa5, 0x41, 0x88, 0xed, 0x7c, 0xe7, 0x66, 0x7b, 0xb6, 0x9f, 0xa5, 0x88, 0x13, 0x5a, 0x48,
	0x74, 0x67, 0x71, 0x4e, 0x22, 0xcc, 0x38, 0x8a, 0x12, 0x49, 0x30, 0x77, 0x41, 0x6b, 0x87, 0xe1,
	0x74, 0xcb, 0x13, 0x49, 0x0c, 0x42, 0xd0, 0xc8, 0x18, 0x4e, 0x75, 0xad, 0xa7, 0xad, 0xff, 0x3f,
	0xca, 0xd7, 0xf0, 0x31, 0xf8, 0x0f, 0x49, 0x58, 0x9f, 0xeb, 0xd5, 0xd7, 0x17, 0xfa, 0x6b, 0x56,
	0xe5, 0x29, 0x2d, 0x29, 0x32, 0x2a, 0xd8, 0xe6, 0x5b, 0x00, 0xce, 0xb5, 0x2b, 0xa5, 0x1f, 0x81,
	0xa6, 0x24, 0xeb, 0x73, 0x3d, 0xed, 0x6a, 0x65, 0x45, 0x36, 0xbf, 0xcf, 0x83, 0x6b, 0x4f, 0x65,
	0x1f, 0xc6, 0x1c, 0x71, 0x0c, 0x0f, 0xc0, 0x72, 0x44, 0xfd, 0x2c, 0xc4, 0x0e, 0xf2, 0x3c, 0x9a,
	0xc5, 0xdc, 0x71, 0x51, 0x88, 0x62, 0x0f, 0xe7, 0xd5, 0x5a, 0xfd, 0x15, 0x4b, 0xb6, 0xd2, 0x12,
	0xad, 0x2e, 0x55, 0xb7, 0x29, 0x89, 0x07, 0xf7, 0x8e, 0xa6, 0xdd, 0xda, 0xd9, 0xb4, 0xbb, 0x36,
	0x41, 0x51, 0xf8, 0xc4, 0xac, 0x96, 0x31, 0x47, 0x4b, 0x12, 0xd8, 0x92, 0xf1, 0x81, 0x0c, 0x43,
	0x0a, 0x20, 0x22, 0xa9, 0x9f, 0xd2, 0xc4, 0x61, 0x1c, 0xa5, 0xdc, 0x11, 0xed, 0xcd, 0xcf, 0xd2,
	0xea, 0x77, 0x2c, 0xd9, 0x7b, 0xab, 0xe8, 0xbd, 0xf5, 0xba, 0xe8, 0x7d, 0x59, 0x74, 0x45, 0x16,
	0xbd, 0xac, 0x61, 0x1e, 0xfe, 0xec, 0x6a, 0xa3, 0xb6, 0x02, 0xc6, 0x22, 0x2e, 0xb2, 0xe1, 0x17,
	0x0d, 0x2c, 0x15, 0x57, 0xec, 0x64, 0x31, 0x27, 0xa1, 0xe3, 0x63, 0x0f, 0x4d, 0xf4, 0xba, 0x3a,
	0xe7, 0x6c, 0xcd, 0xa1, 0x22, 0x0f, 0x9e, 0x8b, 0x92, 0xbf, 0xa7, 0x5d, 0xa3, 0x2a, 0xfd, 0x3e,
	0x8d, 0x08, 0xc7, 0x51, 0xc2, 0x27, 0x67, 0xd3, 0xee, 0xaa, 0x34, 0x55, 0xc5, 0x33, 0xbf, 0x0a,
	0x5b, 0xb0, 0x80, 0x76, 0x04, 0x32, 0x14, 0x00, 0xfc, 0xac, 0x81, 0xc5, 0x32, 0x83, 0xee, 0x29,
	0x57, 0x8d, 0xab, 0x5c, 0x6d, 0x2b, 0x57, 0xab, 0x97, 0x72, 0xff, 0xb2, 0xa4, 0xcf, 0x58, 0x2a,
	0x48, 0xd2, 0xcf, 0xf5, 0x22, 0xfe, 0x72, 0x4f, 0x9a, 0x79, 0x05, 0x20, 0x89, 0x09, 0x27, 0x28,
	0x74, 0xf2, 0x39, 0x42, 0x6e, 0x88, 0x99, 0x3e, 0xdf, 0xab, 0xaf, 0xb7, 0xfa, 0xb7, 0xcf, 0x47,
	0x21, 0xde, 0x2f, 0x47, 0x41, 0x5d, 0xe8, 0xa0, 0x21, 0xfc, 0x8c, 0x16, 0x55, 0xf6, 0x76, 0x99,
	0x0c, 0x9f, 0x01, 0x20, 0x86, 0xef, 0x80, 0x70, 0x82, 0x99, 0xde, 0xcc, 0xa5, 0xcc, 0x7f, 0x4c,
	0xeb, 0x85, 0x1f, 0x4a, 0x09, 0x5e, 0xc8, 0xdd, 0x70, 0x40, 0x53, 0xfd, 0x11, 0xcb, 0x00, 0xca,
	0xd5, 0x96, 0xef, 0xbf, 0x20, 0xef, 0x33, 0xe2, 0x13, 0x3e, 0x69, 0xd7, 0xe0, 0x02, 0x00, 0x32,
	0x3e, 0xfe, 0x80, 0x92, 0xb6, 0x76, 0xbe, 0x7f, 0x43, 0x39, 0x6e, 0xcf, 0xc1, 0x5b, 0xe0, 0x86,
	0xdc, 0x0f, 0x71, 0x88, 0x03, 0xc4, 0xf1, 0x98, 0xa3, 0x7d, 0xdc, 0xae, 0x77, 0x1a, 0x9f, 0xbe,
	0x19, 0xb5, 0xc1, 0xf0, 0xe8, 0xc4, 0xd0, 0x8e, 0x4f, 0x0c, 0xed, 0xd7, 0x89, 0xa1, 0x1d, 0x9e,
	0x1a, 0xb5, 0xe3, 0x53, 0xa3, 0xf6, 0xe3, 0xd4, 0xa8, 0xed, 0x6e, 0x04, 0x84, 0xbf, 0xcb, 0x5c,
	0xcb, 0xa3, 0x91, 0xed, 0x3d, 0x28, 0xde, 0xb3, 0xe2, 0xfb, 0x51, 0xbd, 0x6c, 0x7c, 0x92, 0x60,
	0xe6, 0x36, 0xf3, 0xcb, 0x7a, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xe7, 0xda, 0x39, 0xf7,
	0x04, 0x00, 0x00,
}

func (m *UserActions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserActions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserActions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		dAtA2 := make([]byte, len(m.Actions)*10)
		var j1 int
		for _, num := range m.Actions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGenesis(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for iNdEx := len(m.Activities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.InitialClaimables) > 0 {
		for iNdEx := len(m.InitialClaimables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialClaimables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DurationOfDecay, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DurationOfDecay):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGenesis(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DurationUntilDecay, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DurationUntilDecay):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintGenesis(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.AirdropStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.AirdropStartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintGenesis(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ModuleAccountBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserActions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Actions) > 0 {
		l = 0
		for _, e := range m.Actions {
			l += sovGenesis(uint64(e))
		}
		n += 1 + sovGenesis(uint64(l)) + l
	}
	return n
}

func (m *UserAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovGenesis(uint64(m.Action))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ModuleAccountBalance.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.AirdropStartTime)
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DurationUntilDecay)
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DurationOfDecay)
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.InitialClaimables) > 0 {
		for _, e := range m.InitialClaimables {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Activities) > 0 {
		for _, e := range m.Activities {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserActions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserActions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserActions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Action
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Action(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Actions = append(m.Actions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Actions) == 0 {
					m.Actions = make([]Action, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Action
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Action(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Actions = append(m.Actions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccountBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModuleAccountBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.AirdropStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationUntilDecay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DurationUntilDecay, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationOfDecay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DurationOfDecay, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialClaimables = append(m.InitialClaimables, types1.Balance{})
			if err := m.InitialClaimables[len(m.InitialClaimables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activities = append(m.Activities, UserActions{})
			if err := m.Activities[len(m.Activities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
